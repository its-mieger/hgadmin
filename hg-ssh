#! /usr/bin/env python

import sys, os, re, subprocess

def fail(message):
    sys.stderr.write("mercurial-server: %s\n" % message)
    sys.exit(-1)

def extractuser():
    return sys.argv[1]

def sanitize_path(path):
    path = path.strip().strip('"')
    path = os.path.abspath(os.path.expanduser('~'), path)
    if len(path) == 0 or path.find('"') != -1 or path.find('/.') != -1 or os.sep != '/':
        fail("invalid repository path")
    return path

def is_managed_path(path):
    return os.access(path + '/.hg/ADMINISTRATED_BY_HGADMIN', os.F_OK)

def parse_cmd():
    origcmd = os.environ.get('SSH_ORIGINAL_COMMAND', None)
    if origcmd == None:
        fail("started directly")

    match_serve = re.match('^hg -R (.*) serve --stdio$', origcmd)
    match_init  = re.match('^hg init (.*)$', origcmd)

    if not match_init and not match_serve:
        fail("invalid command")
    
    if match_serve:
        cmd = "serve"
        repo = match_serve.group(1)
    elif match_init:
        cmd = "create"
        repo = match_init.group(1)
    else:
        fail("internal error")
    repo = sanitize_path(repo)
    return (cmd, repo)
    
def allow_access(repo, user, access):
    repo = hg.repository(ui.ui(), repo)
    denyread   = repo.ui.configlist("web", "deny_read")  
    allowread  = repo.ui.configlist("web", "allow_read") 
    denywrite  = repo.ui.configlist("web", "deny_write") 
    allowwrite = repo.ui.configlist("web", "allow_write")
    if access == 'read':
        if denyread == ['*'] or user in denyread:
            return False
        if allowread == ['*'] or user in allowread:
            return True
        return False
    elif access == 'write':
        if denywrite == ['*'] or user in denywrite:
            return False
        if allowwrite == ['*'] or user in allowwrite:
            return True
        return False
    else:
        return False

def serve_impl(user, repo):
    if not is_managed_path(repo):
        fail("path contains no managed repository")
    from mercurial import demandimport; demandimport.enable()
    from mercurial import dispatch, hg, ui
    try:
        request = dispatch.request
    except AttributeError:
        request = list
    if not allow_access(repo, user, "read"):
        fail("insufficient privilege")
    rqlist = ['-R', targetrepo, 'serve', '--stdio']
    if not allow_access(repo, user, "write"):
        rqlist += ['--config', 'hooks.prechangegroup=false', '--config', 'hooks.pretxnchangegroup=false']
    dispatch.dispatch(request(rqlist))


def main():
    user = extractuser()
    cmd, repo = parse_cmd()
    if cmd == "serve":
        serve_impl(user,repo)
    elif cmd == "create":
        create_impl(user,repo)
    else:
        fail("invalid command")

def create_impl_dummy(user, repo):
    fail("repository creation deactivated")

# you can omit the rest if you want to use this script standalone
# and do not need users' ability to create repos
# of course, you should rename create_impl_dummy to create_impl...

def create_impl(user, repo):
    retv = subprocess.call(["hgadmin", "mkrepo", user, repo])
    if retv != 0:
        fail("repo creation failed")
    exit(0)

if __name__ == "__main__":
    main()
