#! /usr/bin/env python

import sys, os, re, subprocess, time


######################################################################
# Configurable Variables
######################################################################

# Set to True to enable debugging 
Debug = True

# Set to False to disallow repository creation via SSH
allowcreate = True

######################################################################
# Code starts here, You should not need to modify anything below this
# comment.
######################################################################

DebugFD = sys.stderr

try:
    DebugFD = open("/var/log/hgadmin/hg-ssh.log", "a")
except Exception as e:
    DebugFD = sys.stderr

def main():
    repodir, user, confdir = extractargs()
    cmd, repo = parse_cmd(repodir)
    debug("repodir: " + repr(repodir) + " user: " + repr(user) \
              + " confdir: " + repr(confdir) + " cmd: " + repr(cmd) \
              + " repo: " + repr(repo))
    if cmd == "serve":
        serve_impl(user,repo, repodir)
    elif cmd == "create":
        create_impl(user,repo, confdir)
    else:
        fail("invalid command")

def extractargs():
    if len(sys.argv) != 4:
        fail("invalid command line")
    return (os.path.expanduser(sys.argv[1]), sys.argv[2], sys.argv[3])

def fail(message):
    debug("hgadmin: %s\n" % message)
    sys.stderr.write("hgadmin: %s\n" % message)
    sys.exit(-1)

def debug(msg):
    if Debug:
        DebugFD.write("hg-ssh debug @" + time.asctime() + " " + msg + "\n")

def parse_cmd(repodir):
    origcmd = os.environ.get('SSH_ORIGINAL_COMMAND', None)
    debug("original command: " + repr(origcmd))
    if origcmd == None:
        fail("started directly")

    match_serve = re.match('^hg -R (.*) serve --stdio$', origcmd)
    match_init  = re.match('^hg init (.*)$', origcmd)

    if not match_init and not match_serve:
        fail("invalid command")
    
    if match_serve:
        cmd = "serve"
        repo = match_serve.group(1)
    elif match_init:
        cmd = "create"
        repo = match_init.group(1)
    else:
        fail("internal error")

    if os.sep != '/':
        fail("invalid operating system")

    # now sanitize the path
    repo = repo.strip().strip('"')
    if len(repo) == 0:
        fail("invalid repository path")
    repo = repodir + '/' + repo
    repo = os.path.abspath(repo)
    if repo.find('"') != -1 or repo.find('/.') != -1 or repo.find(repodir) != 0:
        fail("invalid repository path")
    return (cmd, repo)

def serve_impl(user, repo, repodir):
    if not is_managed_path(repo, repodir):
        fail("path contains no managed repository")
    from mercurial import demandimport; demandimport.enable()
    from mercurial import dispatch
    try:
        request = dispatch.request
    except AttributeError:
        request = list
    readaccess, writeaccess = allow_access(repo, user)
    if not readaccess:
        fail("insufficient privilege")
    rqlist = ['-R', repo, 'serve', '--stdio']
    if not writeaccess:
        rqlist += ['--config', 'hooks.prechangegroup=false', \
                       '--config', 'hooks.pretxnchangegroup=false']
    debug("success: " + repr(rqlist))
    dispatch.dispatch(request(rqlist))

def create_impl(user, repo, confdir):
    debug("success: " + repr(["hgadmin", "--confdir", confdir, "maybe_create_repo", user, repo]))
    if not allowcreate:
        fail("repository creation deactivated")
    retv = subprocess.call(["hgadmin", "--confdir", confdir, "maybe_create_repo", user, repo])
    if retv != 0:
        fail("repo creation failed")
    exit(0)


def is_managed_path(path, repodir):
    dirpart = os.path.dirname(path)
    if not os.path.exists(dirpart):
        return False
    realdirpart = os.path.realpath(dirpart)
    realrepodir = os.path.realpath(repodir)
    if not realdirpart.startswith(realrepodir):
        return False
    return os.access(path + '/.hg/ADMINISTRATED_BY_HGADMIN', os.F_OK)
    
def allow_access(repo, user):
    try:
        from mercurial import hg, ui
        repo = hg.repository(ui.ui(), repo)
        denyread   = repo.ui.configlist("web", "deny_read")  
        allowread  = repo.ui.configlist("web", "allow_read") 
        denywrite  = repo.ui.configlist("web", "deny_push") 
        allowwrite = repo.ui.configlist("web", "allow_push")
    except Exception:
        fail("could not access repository configuration")
    readaccess  = ((allowread  == ['*'] or user in allowread ) \
           and not (denyread   == ['*'] or user in denyread  ))
    writeaccess = ((allowwrite == ['*'] or user in allowwrite) \
           and not (denywrite  == ['*'] or user in denywrite ))
    return (readaccess, writeaccess)

if __name__ == "__main__":
    main()
