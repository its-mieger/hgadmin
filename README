* Hgadmin for users

** Overview

   Hgadmin as a tool is mainly intended to ease system administration.

   End users should not notice anything related to hgadmin, except
   hopefully that "everything just works"(tm)

** Requirements
   As end user, you only need a computer with mercurial.

   A repository server managed with hgadmin will typically export
   several repositories. These repositories can be accessed via ssh or
   http(s); hgadmin will manage access control and authentication for
   both access methods at the same time.

   For http(s) access, typically a password will be needed.
   Currently, hgadmin supports htpasswd - files as used by apache and
   several other web servers. An end user will therefore have to set a
   password. Setting this password is out of scope of hgadmin; contact
   your system administrators for related information.

   For ssh access, a ssh key is needed. An end user will have to
   create a ssh key and submit its public part to the administrators.

   Additionally, the administrators will have to configure which
   repositories the user has read- and commit-access.

** Usage

   After setting a password and submitting a ssh key, an end user can
   use the repositories managed by hgadmin exactly like any other
   remote mercurial repository.

* Hgadmin for administrators

** Overview

hgadmin is intended to help with managing access to mercurial
repositories. Its intended scenario is:

 - a set of users (optionally organized in groups)
 - a set of repositories (all residing below one directory)
 - a user may be allowed to read or write to some repositories
 - a user may be allowed to create new repositories in some subdirectory
 - read/write access is possible via ssh and https
 - creation is possible only via ssh

hgadmin keeps a user/group database and access configuration in one
place, and manages repository creation and access control.

Comparison with other tools

- mercurial-server
  hgadmin supports groups (which mercurial-server does not)
  hgadmin supports users, whereas mercurial-server just does access control for keys
  hgadmin supports access via https 
  hgadmin is about as complicated to set up as mercurial-server

- rhodecode
  hgadmin supports access via ssh (which rhodecode does not)
  hgadmin does not require a web server or some complicated setup


This package consists of two scripts, hg-ssh and hgadmin.

*** hg-ssh

hg-ssh is supposed to be invoked by the ssh-server as a wrapper around
the "ordinary" hg, via the "command=..." option in the authorized_keys
file.

Note that hg-ssh is only used internally by hgadmin. Ordinarily, a
system administrator need not care about it.

Given that hg-ssh is the only part that faces direct communication
with external users, here a description of its actions:

hg-ssh requires three arguments on execution. Its first argument is
the directory where the repositories are located. Its second argument
ist the user associated with the ssh-key. Its third argument is the
directory where the configuration data for hgadmin resides.

hg-ssh will parse the environment variable SSH_ORIGINAL_COMMAND (as
set by ssh) for an attempt at repository creation or access. If
neither matches, hg-ssh will exit. 

If the value of SSH_ORIGINAL_COMMAND looks like an attempt at
repository creation (i.e. it matches the regex '^hg init .*$'), hg-ssh
will check whether repository creation is enabled. If so, it will pass
the name of the repository to be created, the creating user and the
configuration directory to the hgadmin script.

If the value of SSH_ORIGINAL_COMMAND looks like an attempt at
repository access (i.e. it matches the regex '^hg -R .* serve --stdio$'), 
hg-ssh will check whether a directory with this name exists and looks
like it is managed by hgadmin (by checking the presence of the file
'.hg/ADMINISTRATED_BY_HGADMIN'). If said file is not present, hg-ssh
will abort.  Next, hg-ssh will attempt to parse the repository-local
configuration and check whether its username is present in the list of
users allowed to read from or write to the repository. If the user is
not allowed to read, hg-ssh will abort.  If the user is not allowed to
write to the repository, hg-ssh will execute:

'hg serve --stdio -R REPO --config hooks.prechangegroup=false --config hooks.pretxnchangegroup=false'

Otherwise (i.e. if the user is allowed to read and write) hg-ssh will
execute:

'hg serve --stdio -R REPO'.

This hg-ssh script differs from the hg-ssh script found in the
mercurial distribution, in that it:
  - does not require all allowed repositories to be mentioned on the
    commandline instead, the (known) username is checked against the
    web configuration in the repository
  â€“ allowes repository creation (by invoking hgadmin)

*** hgadmin

The hgadmin script serves several purposes, depending on the way it is
called. 

If called like 'hgadmin mkrepo USER PATH' it will read the
configuration, determine whether USER is allowed to create a
repository at PATH, and, if he is, hgadmin will create a repository.

If called like 'hgadmin updateauth' it will read its configuration,
and refresh access configuration.

If called like 'hgadmin verify', it will read the configuration, and
exit successfully if the configuration is valid. If the configuration
is inconsistent, it will exit unsuccessfully.

If called like 'hgadmin accesscheck ACCESSTYPE USER PATH', the script
will read the configuration and check (and report) whether the user
USER is allowed access ACCESSTYPE to a (potentially not yet existing)
repository located at PATH.

All these invocations share these options:
  - "-D"            - enables debugging output
  - "--confdir DIR" - sets configuration directory to DIR

** Installation

After installation, the hgadmin scripts are installed on your
system, but not yet configured.

Basic installation consists of these steps:

  - Clone the hgadmin repository
	Example: hg clone https://www.hawo-net.de/~jakob/repos/hgadmin /opt/hgadmin

  - Put the hgadmin executables somewhere in the PATH
	Example: ln -s /opt/hgadmin/{hgadmin,mkconfrepo,hg-ssh} /usr/local/bin


** Configuration

*** Example

General configuration variables:

     USER=hg
	 REPODIR=/var/repos
	 CONFDIR=/home/hg/hgadmin-config

Creation of the repository directory and configuration directory:

     mkdir $REPODIR
	 chown $USER $REPODIR
	 su $USER mkconfrepo $CONFDIR
TODO: hooks!	 

Assuming that you have a ssh key to administrate hgadmin, which
resides in "/tmp/admin_ssh_key":

     su - $USER mkdir -p .ssh
	 su - $USER chmod go-rwx .ssh
	 cp /tmp/admin_ssh_key /home/$USER/.ssh/authorized_keys_const
	 chown $USER /home/$USER/.ssh/authorized_keys_const
	 chmod go-rwx /home/$USER/.ssh/authorized_keys_const



echo -e "[paths]\n/ = $REPODIR/**\n" >> $REPODIR/repos.cfg


*** 

All the configuration of hgadmin resides in one directory. There are
two configuration files and one directory for the users' ssh keys.

The first configuration file is named 'config'. Its format is standard
ini-format (as understood by python's ConfigParser).

There are three sections in the 'config'-file, named 'paths', 'groups' and 'users'.

The section 'paths' has six possible settings:

  - 'repopath' -- directory path that contains the managed repositories
  - 'htpasswdpath' -- path to the htpasswdfile, if present
  - 'sshauthkeyspath' -- path to the authorized_keys file
  - 'hg-ssh' -- path to the hg-ssh script

The section 'users' has exactly one setting, named 'users'.
Its value is a comma separated list of the users.

The section 'groups' contains the groups. A groupname is encoded in
the name of a setting; the users belonging to the group end up in the
value of the setting.


