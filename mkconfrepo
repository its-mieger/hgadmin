#! /usr/bin/env python

conffiles = {}

conffiles["keys/README"] = """This is the keys directory.

For each user, place a subdirectory here, which is named like the user.

All files in this subdirectory are treated as if they contain ssh keys.

Normal files and subdirectories not named like users are ignored.

You may remove this README-file (if you have a user named README ;) )
"""

conffiles["access"] = """# Access configuration file.
# This file also has ini file syntax.
#
# The section names are names of repositories, or patterns matching
# multiple repositories.  Each section name must start with a "/".
# Names of repositories are interpreted relative to the directory
# where all managed repositories are placed. A pattern ends with
# exactly one or two '*' characters. If ending with only one '*', it
# will match all repositories located exactly in the directory pointed
# to by the rest of the pattern, without descending into
# subdirectories. If ending with two '*', it will match all
# repositories located in the directory or in any of its
# subdirectories.
#
# Directories or patterns names may not contain a ']' character. They
# may also not refer to hidden directories, files or repositories
# (whose name starts with a dot ('.')).
# 
# It is also not possible to use a '*' character anywhere in a
# repository name. A pattern may only contain exactly one or two '*'
# characters, which must be the last characters of the pattern.
#
# 


[/**]

user1 = r
user2 = r w
nonexistentuser = Cw
user3 = rwC

[/repo1]

@group1 = r
@group2 = wr
@nonexistentgroup = rwC
user4 = w

[/sub1/*]
user2 = Cw


[/sub2/**]

user1 = rw

[/sub2/*]

[invalid1]

[/invalid2/*/reallyinvalid/**]


"""

conffiles["config"] = """# Example configuration file. This file has
# ini file syntax (as understood by pythons ConfigFileParser
# 
# There are three sections; [paths], [groups] and [users]

[paths]
# Here, you can configure paths referring to important files and
# directories. The configurable paths and their default values are
# listed below.
#
#    repopath = ~/repos
# This path refers to the directory where the repositories to manage
# are located.
#
#   htpasswdpath = ~/repos/htpasswd
# This path refers to the htpasswd file. If this repository contains a
# file named "htpasswd", hgadmin will overwrite the file pointed to by
# "htpasswdpath" with the contents of the file in this repository
# named "htpasswd".
#
#   hg-ssh = ~/hgadmin/hg-ssh
#
# This path points to the hg-ssh script.
#
#   sshauthkeyspath = ~/.ssh/authorized_keys
# This path refers to the authorized_keys file used by ssh to
# determine access authorization. This file will be replaced by an
# autogenerated list of allowed keys, restricted to only executing the
# "hg-ssh" command, as listed above.
#

[groups]
# This section contains group definitions.
# Example definitions are listed below.
#
# group1 = user1, user2
# group2 = user3, user5, user6
# group3 = 
#   user1, # comment
#   # another comment
#   user2, user3, user4

[users]
# This section contains exactly one option, named "users".
# Its value is a list of the users. 
#
# users = user1, user2,
# # strange user with own description:
#   user3,
# # another user description
#   another_user,
# # and another user description
#   user4
# 
"""

conffiles["hook-examples"] = """# example hook configurations
# 
# This file contains some examples for how to add hooks to the
# configuration repository
#
# If this repository is a clone of the real configuration repository, consider 
# adding this hook:
#
#    [hooks]
#    precommit.hgadmin = hgadmin verify
#
# It will check your configuration for obvious errors and abort the
# commit if some are found
#
#
# If this repository is the real repository, consider adding these hooks:
#
#    [hooks]
#    changegroup.hgadmin = hg up
#    update.hgadmin = hgadmin updateauth
#    commit.hgadmin = hgadmin updateauth
#
# They will attempt to recreate the authentication information every
# time you commit locally or something gets pushed into the repository.
"""

conffiles["hgrc"] = """# sample hgrc to be included in every managed repo
# things you may want:
# [web]
# hidden = True
# contact = SOMEONERESPONSIBLE
# push_ssl = True
# allow_archive = zip
"""

conffiles["README"] = """README file. fill out content!

For now, read the contents of the other files in this repo, learn
python and read the hgadmin and hg-ssh scripts ;)
"""

import sys, os

if len(sys.argv) != 2:
   print("please give name of config repository to create!")
   sys.exit(1)

r = os.system("hg init " + sys.argv[1])
if r!= 0:
   print("unable to create config repository")
   sys.exit(1)
   

try:
   os.chdir(sys.argv[1])
except OSError as e:
   print("unable to enter newly created config repository??!?")
   sys.exit(1)
   
try:
   os.mkdir("keys")
   for k in conffiles:
      conffd = open(k, "w")
      conffd.write(conffiles[k])
      conffd.close()
      r = os.system("hg add " + k)
      if r != 0:
         print("unable to add file %s in config repository to hg" % k)
         sys.exit(1)
except OSError as e:
   print("unable to create config repository default files??")
   sys.exit(1)


r = os.system("hg commit -m 'automatically generated hgadmin configuration repository'")
if r != 0:
   print("unable to commit config repository")
   sys.exit(1)
